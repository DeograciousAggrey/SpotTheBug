{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "vrfCoordinator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "linkToken",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_keyHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_fee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_ticketPrice",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tickets",
						"type": "uint256"
					}
				],
				"name": "TicketPurchased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "WinnerDrawn",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "numberOfTickets",
						"type": "uint256"
					}
				],
				"name": "buyTicket",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "drawWinner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRandomResult",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "players",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "requestId",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "randomness",
						"type": "uint256"
					}
				],
				"name": "rawFulfillRandomness",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ticketCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ticketPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "tickets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "winner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawLink",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawPrize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"buyTicket(uint256)": {
					"details": "Allows players to purchase tickets for the lottery.",
					"params": {
						"numberOfTickets": "The number of tickets to purchase."
					}
				},
				"constructor": {
					"details": "Initializes the SimpleLottery contract.",
					"params": {
						"_fee": "The fee required to request randomness from Chainlink VRF.",
						"_keyHash": "The Chainlink VRF key hash.",
						"_ticketPrice": "The price per ticket in wei.",
						"linkToken": "The address of the LINK token contract used for payments to Chainlink VRF.",
						"vrfCoordinator": "The address of the Chainlink VRF coordinator contract."
					}
				},
				"drawWinner()": {
					"details": "Draws the winner of the lottery using a random number from Chainlink VRF."
				},
				"getRandomResult()": {
					"details": "Returns the latest random number generated by Chainlink VRF.",
					"returns": {
						"_0": "The latest random number."
					}
				},
				"getWinner()": {
					"details": "Returns the address of the current winner.",
					"returns": {
						"_0": "The address of the winner if the winner has been drawn, otherwise reverts with an error message."
					}
				},
				"withdrawLink()": {
					"details": "Allows the owner to withdraw any remaining LINK tokens in the contract."
				},
				"withdrawPrize()": {
					"details": "Allows the owner to withdraw the prize amount to the winner."
				}
			},
			"title": "SimpleLottery - A simple lottery contract using Chainlink VRF for randomness.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"buyTicket(uint256)": {
					"notice": "The function requires sending enough ether to cover the ticket price multiplied by the number of tickets."
				},
				"drawWinner()": {
					"notice": "Only the owner of the contract can call this function, and the winner cannot be drawn again."
				},
				"withdrawPrize()": {
					"notice": "The winner must have been drawn before calling this function."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SimpleLottery.sol": "SimpleLottery"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
			"keccak256": "0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469",
			"license": "MIT",
			"urls": [
				"bzz-raw://68ff9557dad6da8108073dadcbfe5cd1f45106c2f890443eacd3bf8d59955d4e",
				"dweb:/ipfs/QmSKYkP8wNX7MKYrCroFps62gdxEwwrZwsz4RLc6XzNkxi"
			]
		},
		"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
			"keccak256": "0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b",
			"license": "MIT",
			"urls": [
				"bzz-raw://79c72d66deaa4b0f251f3f0817f45ebceb71f5b4f94a86ac0e586de99f5af2b6",
				"dweb:/ipfs/QmcHkApHm5CAynjajcCUYppaKJ9sNWGZTEcSs4tUK8B5K5"
			]
		},
		"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
			"keccak256": "0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5",
			"license": "MIT",
			"urls": [
				"bzz-raw://8cb1064885ecbcd9c3adba779e190cb4a538e5d4d15aeccb67d3376bdffc94bd",
				"dweb:/ipfs/QmcQHK6ewve7tFi4XXK65JthQg4kQzApQikWcURJjGt4iQ"
			]
		},
		"SimpleLottery.sol": {
			"keccak256": "0x8b7f09ca6faa2227ffe00d7246be863eb28c71c46ac3f24ceba18ec002e89aad",
			"license": "MIT",
			"urls": [
				"bzz-raw://28783b5ad4f044e5aa2d8163a8de8b58242266546c5f70f3eef09a0c131b91dd",
				"dweb:/ipfs/QmPR6eVMCD5Gj2GCVpM3TXuKfZdEV1r4iEaUWZ4m4f7iE1"
			]
		}
	},
	"version": 1
}